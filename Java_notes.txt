Intro to Java
  It is a simple programming language. Java makes writing, compiling, and debugging programming easy. It helps to create reusable code and modular programs. Java is a class-based, object-oriented programming language and is designed to have as few implementation dependencies as possible.
  write once run anywhere
  Java applications are compiled to byte code that can run on any Java Virtual Machine

Features
  1. Platform Independent:  Compiler converts source code to bytecode and then the JVM executes the bytecode generated by the compiler. This bytecode can run on any platform be it Windows, Linux, or macOS which means if we compile a program on Windows, then we can run it on Linux and vice versa. Each operating system has a different JVM, but the output produced by all the OS is the same after the execution of bytecode. That is why we call java a platform-independent language.

  2. Object-Oriented Programming Language:  Organizing the program in the terms of collection of objects is a way of object-oriented programming, each of which represents an instance of the class.

  The four main concepts of Object-Oriented programming are:
  Abstraction
  Encapsulation
  Inheritance
  Polymorphism

  3. Simple:  Java is one of the simple languages as it does not have complex features like pointers, operator overloading, multiple inheritances, and Explicit memory allocation. 

  4. Robust:  Java language is robust which means reliable. It is developed in such a way that it puts a lot of effort into checking errors as early as possible, that is why the java compiler is able to detect even those errors that are not easy to detect by another programming language. The main features of java that make it robust are garbage collection, Exception Handling, and memory allocation.

  5. Secure:  In java, we don’t have pointers, so we cannot access out-of-bound arrays i.e it shows ArrayIndexOutOfBound Exception if we try to do so. That’s why several security flaws like stack corruption or buffer overflow are impossible to exploit in Java. Also java programs run in an environment that is independent of the os(operating system) environment which makes java programs more secure .

  6. Distributed:  We can create distributed applications using the java programming language. Remote Method Invocation and Enterprise Java Beans are used for creating distributed applications in java. The java programs can be easily distributed on one or more systems that are connected to each other through an internet connection.

  7. Multithreading:  Java supports multithreading. It is a Java feature that allows concurrent execution of two or more parts of a program for maximum utilization of the CPU.

  8. Portable:  As we know, java code written on one machine can be run on another machine. The platform-independent feature of java in which its platform-independent bytecode can be taken to any platform for execution makes java portable.

  9. High Performance: Java architecture is defined in such a way that it reduces overhead during the runtime and at some time java uses Just In Time (JIT) compiler where the compiler compiles code on-demand basics where it only compiles those methods that are called making applications to execute faster.

  10. Dynamic flexibility: Java being completely object-oriented gives us the flexibility to add classes,  new methods to existing classes and even create new classes through sub-classes. Java even supports functions written in other languages such as C, C++ which are referred to as native methods.

  11. Sandbox Execution: Java programs run in a separate space that allows user to execute their applications without affecting the underlying system with help of a bytecode verifier. Bytecode verifier also provides additional security as its role is to check the code for any violation of access.

  12. Write Once Run Anywhere: As discussed above java application generates a ‘.class’ file which corresponds to our applications(program) but contains code in binary format. It provides ease t architecture-neutral ease as bytecode is not dependent on any machine architecture. It is the primary reason java is used in the enterprising IT industry globally worldwide.

  13. Power of compilation and interpretation: Most languages are designed with purpose either they are compiled language or they are interpreted language. But java integrates arising enormous power as Java compiler compiles the source code to bytecode and JVM  executes this bytecode to machine OS-dependent executable code.  

Compiler
  it is a program that takes source code in high lavel langauge (human understandable language) and converts it into byte code.
  refer image in folder

Interpreter
  it is also a program that takes source code in high lavel langauge (human understandable language) and converts it into byte code. But it will not return you any executabe unlike compiler. It will actualy translate and execute the code immediately giving the output of program.
  refer image in folder

Diff bet compiler and interpreter
  Behavior
    1. compiler translated source code to machine code but does not executes the translated code.
    2. An interpreter translates and then execute cources code on the fly without giving a target executable to run by a programmer.

  Performance
    1. the translation of high level code to machine code is slow but subsequent execution is fast.
    2. An interpreter starts executing the source program immediately, but the execution is slow as translation is done on the fly.

What Java uses
  Java uses both, it uses compiler to convert the source code to byte code and interpreter to execute the byte code.

JDK
  It is SDK with combination of tools and libraries for compiling, debugging, testing and executing java programs.
  Tools in JDK:
    1. Javac
        Its a compiler that convert source code to byte code. It is also a type of command in cmd.
    2. jdb
        Java debugge is tool to find and fix errors

JRE
  It contains all the tools and libraries required for running the compiled Bytecode. 
  Utilities included in JRE
  1. Java: Its a command line tool which is responsible for launching the JVM.
  2. Librabies: Eg- collection framework etc.

JVM
  When you try to execute a program on CPU you have to execute JVM i.e interpreter. interpreter is platform dependent, for every platform there is different interpreter. JVM should know the OS and real processor. You can also say JVM = interpreter + actual platform.
  refer images for relation between JDK, JRE, JVM and there architecture. 

Structure of class
  A class is a template for creating a particular form of object.
  elements:
    Attributes
    constructor
    distructor
    getter methods 
    setter methods
    Object

Java Variables

  A variable is a container which holds the value while the Java program is executed. A variable is assigned with a data type.

  Eg: int data=50;//Here data is variable  

  There are three types of variables in java: local, instance and static

  1) Local Variable
    A variable declared inside the body of the function is called local variable. You can use this variable only within that function and the other functions in the class aren't even aware that the variable exists.
    A local variable cannot be defined with "static" keyword.

  2) Instance Variable
    A variable declared inside the class but outside the body of the function, is called an instance variable. It is not declared as static.
    It is called an instance variable because its value is instance-specific and is not shared among instances.

  3) Static variable
    A variable that is declared as static is called a static variable. It cannot be local. You can create a single copy of the static variable and share it among all the instances of the class. Memory allocation for static variables happens only once when the class is loaded in the memory.

Data Types in Java

  Data types specify the different sizes and values that can be stored in the variable. There are two types of data types in Java:
  Primitive data types: The primitive data types include boolean, char, byte, short, int, long, float and double.
  Non-primitive data types: The non-primitive data types include Classes, Interfaces, and Arrays.

  Boolean Data Type
    The Boolean data type is used to store only two possible values: true and false. This data type is used for simple flags that track true/false conditions.
    The Boolean data type specifies one bit of information

  Byte Data Type
    The byte data type is an example of primitive data type. It isan 8-bit signed integer. Its value-range lies between -128 to 127 (inclusive). Its minimum value is -128 and maximum value is 127. Its default value is 0.
    The byte data type is used to save memory in large arrays where the memory savings is most required. It saves space because a byte is 4 times smaller than an integer.

  Short Data Type
    The short data type is a 16-bit signed integer. Its value-range lies between -32,768 to 32,767 (inclusive). Its minimum value is -32,768 and maximum value is 32,767. Its default value is 0.
    The short data type can also be used to save memory just like byte data type. A short data type is 2 times smaller than an integer.

  Int Data Type
    The int data type is a 32-bit signed integer.
    The int data type is generally used as a default data type for integral values unless if there is no problem about memory.

  Long Data Type
    The long data type is a 64-bit signed integer.
    The long data type is used when you need a range of values more than those provided by int.

  Float Data Type
    The float data type is a 32-bit floating point.Its value range is unlimited. It is recommended to use a float (instead of double) if you need to save memory in large arrays of floating point numbers. The float data type should never be used for precise values, such as currency. Its default value is 0.0F.
  
  Double Data Type
    The double data type is a 64-bit floating point. Its value range is unlimited. The double data type is generally used for decimal values just like float. The double data type also should never be used for precise values, such as currency. Its default value is 0.0d.

  Char Data Type
    The char data type is used to store characters.
  
Array

  Java array is an object which contains elements of a similar data type. Additionally, The elements of an array are stored in a contiguous memory location. It is a data structure where we store similar elements. We can store only a fixed set of elements in a Java array.

  Types of Array in java
    There are two types of array.
     Single Dimensional Array
     Multidimensional Array

Operator
  Unary Operator
    ++ --
  Arithmetic Operator
    *, /, %,+, -
  Relational Operator
    <, >, <=, >=, ==, !=
  Logical Operator
    &&  ||
  Ternary Operator and
    ? :
  Assignment Operator
    = += -= *= /= %=

Control statements
  Java provides statements that can be used to control the flow of Java code. Such statements are called control flow statements. It is one of the fundamental features of Java, which provides a smooth flow of program.

  Decision Making statements
    if statements
    switch statement
  Loop statements
    do while loop
    while loop
    for loop
    for-each loop
  Jump statements
    break statement
    continue statement

Data type compatibility

08-02
Static variables and methods

Accessing static variables and methods of different class

Introduction to reference data types

Reference variables and methods

Difference between reference data types and primitive data types

Difference between reference variable and static variable

  



  


